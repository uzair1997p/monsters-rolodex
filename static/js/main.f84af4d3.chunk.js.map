{"version":3,"sources":["Components/card/card-component.jsx","Components/card-list/card-list.component.jsx","Components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","fileteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAEaA,EAAK,SAACC,GAAD,OACd,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,UAAWC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACvB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCDTC,G,MAAU,SAACR,GAAD,OAEvB,qBAAMC,UAAU,YAAhB,SACID,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC1B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCNVM,G,MAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACpB,uBACAZ,UAAU,SACVa,KAAK,SAASF,YAAaA,EAAcG,SAAUF,MCyCxCG,E,kDAzCb,aAAc,IAAD,8BACX,gBAQJH,aAAa,SAACI,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SARnC,EAAKC,MAAM,CACTb,SAAS,GAETU,YAAY,IALH,E,qDAab,WAAoB,IAAD,OACjBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UAASF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACT,SAASkB,S,oBAE5H,WAAS,IAAD,EACyBC,KAAKN,MAA5Bb,EADF,EACEA,SAASU,EADX,EACWA,YACXU,EAAkBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC7CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAClD,OAEE,sBAAK9B,UAAU,MAAf,UACE,mDACD,cAAC,EAAD,CACAW,YAAY,kBACZC,aAAce,KAAKf,eAKnB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAhCTI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f84af4d3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\nexport const Card=(props)=>(\r\n    <div className=\"card-container\">\r\n    <img alt=\"monster\"  src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n    <h2>{props.monster.name}</h2>\r\n    <p>{props.monster.email}</p>\r\n    </div>\r\n);\r\n","import React from 'react';\r\nimport {Card} from '../card/card-component';\r\n\r\n\r\nimport './card-list.styles.css'\r\nexport const CardList= (props) =>(\r\n\r\n< div className=\"card-list\">{\r\n    props.monsters.map(monster=>(\r\n    <Card key={monster.id} monster={monster}></Card>\r\n    ))\r\n  }   \r\n  </div>);\r\n\r\n","import React from 'react'\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox =({placeholder,handleChange})=>(\r\n    <input \r\n    className='search'\r\n    type=\"search\" placeholder={placeholder}  onChange={handleChange }\r\n        ></input>\r\n)","import './App.css';\nimport {Component} from 'react'\nimport {CardList} from './Components/card-list/card-list.component'\nimport {SearchBox } from './Components/search-box/search-box.component'\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state={\n      monsters:[\n      ],\n      searchField:''\n    }\n  }\n\nhandleChange=(e)=> {\n  this.setState({searchField: e.target.value});\n}\n\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(response=>(response.json())).then(users=>this.setState({monsters:users})); \n  }\n  render(){\n    const { monsters,searchField} =this.state; \n    const fileteredMonsters=monsters.filter(monster=>\n      monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n       \n      <div className=\"App\">\n        <h1> Monsters Rolodex</h1>\n       <SearchBox \n       placeholder=\"search monsters\"\n       handleChange={this.handleChange}\n       >\n         \n       </SearchBox>\n\n       <CardList monsters={fileteredMonsters}>\n          \n       </CardList>\n       \n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}